/**
 * 应急响应
 * unknown
 *
 * OpenAPI spec version: last
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  * @description addPost参数
  * @property `[setTime]` 设置时间Date类型
  * @property `[committeeName]` 居委名字
  * @property `[address]` 地址
  * @property `[classification]` 事件分类
  * @property `[whetherCasualties]` 有无人员伤亡（布尔类型）
  * @property `[injuredNumber]` 受伤人数
  * @property `[deathNumber]` 死亡人数
  * @property `content` 内容
  * @property `[dutyLeader]` 当日值班领导（数组）
  * @property `[leadersInCharge]` 分管领导（数组）
  * @property `[executiveLeader]` 主管领导（数组）
  * @property `[disposalDepartment]` 处置部门（数组）
  * @property `[file]` 文件（数组）
  */
export interface ParamsaddPost {
  // formParams
  /**
   * 设置时间Date类型
   */
  setTime?: string;
  /**
   * 居委名字
   */
  committeeName?: string;
  /**
   * 地址
   */
  address?: string;
  /**
   * 事件分类
   */
  classification?: string;
  /**
   * 有无人员伤亡（布尔类型）
   */
  whetherCasualties?: string;
  /**
   * 受伤人数
   */
  injuredNumber?: string;
  /**
   * 死亡人数
   */
  deathNumber?: string;
  /**
   * 内容
   */
  content: string;
  /**
   * 当日值班领导（数组）
   */
  dutyLeader?: string;
  /**
   * 分管领导（数组）
   */
  leadersInCharge?: string;
  /**
   * 主管领导（数组）
   */
  executiveLeader?: string;
  /**
   * 处置部门（数组）
   */
  disposalDepartment?: string;
  /**
   * 文件（数组）
   */
  file?: any;
}
/**
  * @description listGet参数
  * @property `pageNo` 当前页数
  * @property `pageSize` 每页容量
  * @property `type` 类型（全部：默认0，自己发出：1，接收：2）
  */
export interface ParamslistGet {
  // queryParams
  /**
   * 当前页数
   */
  pageNo: string;
  /**
   * 每页容量
   */
  pageSize: string;
  /**
   * 类型（全部：默认0，自己发出：1，接收：2）
   */
  type: string;
}
/**
  * @description singleGet参数
  * @property `emergencyId` 事件响应唯一标识
  */
export interface ParamssingleGet {
  // queryParams
  /**
   * 事件响应唯一标识
   */
  emergencyId: string;
}
export class DefaultApi {
  protected $basePath = '/emergency'.replace(/\/$/, '');

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '');
    }
  }

  /**
   * 
   * @summary 添加应急响应事件
   * @param params ParamsaddPost
   
   * @param opt ajax config
   * @returns models.Add
   */
  public addPost = (
    params: ParamsaddPost,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.Add>  => {
    const path = '/add';
    const url = this.$basePath + path;
    const p: any = {};
    p.form = {};
    if ('setTime' in params) p.form.setTime = params.setTime;
    if ('committeeName' in params) p.form.committeeName = params.committeeName;
    if ('address' in params) p.form.address = params.address;
    if ('classification' in params) p.form.classification = params.classification;
    if ('whetherCasualties' in params) p.form.whetherCasualties = params.whetherCasualties;
    if ('injuredNumber' in params) p.form.injuredNumber = params.injuredNumber;
    if ('deathNumber' in params) p.form.deathNumber = params.deathNumber;
    if ('content' in params) p.form.content = params.content;
    ajax.check(params.content, 'content');
    if ('dutyLeader' in params) p.form.dutyLeader = params.dutyLeader;
    if ('leadersInCharge' in params) p.form.leadersInCharge = params.leadersInCharge;
    if ('executiveLeader' in params) p.form.executiveLeader = params.executiveLeader;
    if ('disposalDepartment' in params) p.form.disposalDepartment = params.disposalDepartment;
    if ('file' in params) p.form.file = params.file;
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * 
   * @summary 事件分类查询
   
   
   * @param opt ajax config
   * @returns string
   */
  public classificationListGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<string>  => {
    const path = '/classificationList';
    const url = this.$basePath + path;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * 
   * @summary 居委查询
   
   
   * @param opt ajax config
   * @returns string
   */
  public committeeListGet = (
    
    opt?: ExtraFetchParams
  ) : AjaxPromise<string>  => {
    const path = '/committeeList';
    const url = this.$basePath + path;
    const p: any = {};
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * 
   * @summary 展示详情
   * @param params ParamslistGet
   
   * @param opt ajax config
   * @returns Array
   */
  public listGet = (
    params: ParamslistGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<any>  => {
    const path = '/list';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('pageNo' in params) p.query.pageNo = params.pageNo;
    ajax.check(params.pageNo, 'pageNo');
    if ('pageSize' in params) p.query.pageSize = params.pageSize;
    ajax.check(params.pageSize, 'pageSize');
    if ('type' in params) p.query.type = params.type;
    ajax.check(params.type, 'type');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
  /**
   * 
   * @summary 单个详情
   * @param params ParamssingleGet
   
   * @param opt ajax config
   * @returns models.Single
   */
  public singleGet = (
    params: ParamssingleGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.Single>  => {
    const path = '/single';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('emergencyId' in params) p.query.emergencyId = params.emergencyId;
    ajax.check(params.emergencyId, 'emergencyId');
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    }, path, this.$basePath);
  }
}

export default new DefaultApi();